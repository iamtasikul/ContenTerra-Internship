PostgreSQL

Windows Application :-SQL Shell (psql) / pgAdmin

//Help
\h select


//Create Database
CREATE DATABASE school;

//Show Database
\l

============Confirming the database size================
//First, we return to expanded mode
\x

//Then, execute the following command
\l+ school --(Size in KB)

//check db size using sql command
select pg_database_size('school');

//Drop Database
DROP DATABASE school;

//Conntect Database
\c school;

//Create Table
CREATE TABLE students(id integer not null primary key,fname text not null,lname text not null,age int not null);

//plsql view table
\dt

//Create table with Primary key
CREATE TABLE users (
pk int GENERATED ALWAYS AS IDENTITY,
username text NOT NULL, 
gecos text, 
email text NOT NULL, 
PRIMARY KEY( pk ),
UNIQUE ( username )
);

CREATE TABLE categories (pk int GENERATED ALWAYS AS IDENTITY,title text,description text);

//if not exist Create table with Primary key
CREATE TABLE if not exists users (
pk int GENERATED ALWAYS AS IDENTITY,
username text NOT NULL, 
gecos text, 
email text NOT NULL, 
PRIMARY KEY( pk ),
UNIQUE ( username )
);

//list of all the tables
\d

//Drop Table
DROP TABLE students;
DROP TABLE if exists students;

==========Managing temporary tables (which will only be visible
within the session where the table was created.)===

CREATE temp TABLE if not exists users (
pk int GENERATED ALWAYS AS IDENTITY,
username text NOT NULL, 
gecos text, 
email text NOT NULL, 
PRIMARY KEY( pk ),
UNIQUE ( username )
);

//Create Schema
\c school;
CREATE SCHEMA newschema;

//Delete Schema
DROP SCHEMA newschema;

//Insert Record Into Table
INSERT INTO students(id,fname,lname,age) values(1,'Tasikul','Islam',24);

insert into users (username,gecos,email) values('myusername','mygecos','myemail');

//View Records
SELECT * From students;
select pk,username,gecos,email from users;

//Insert Record Into Table
INSERT INTO students values(2,'Ikbal','Hossain',22);

insert into users (username,gecos,email) values('scotty','scotty_gecos','scotty_email');

//View Records
SELECT * From students;
select pk,username,gecos,email from users order by username;

//Insert Multiple Records Into Table
INSERT INTO students values(3,'John','Doe',42),(4,'Russel','Burnson',36);

insert into categories (title,description) values('apple', 'fruits'), ('orange','fruits'),('lettuce','vegetable');

//Insert with Returning (Show inserted value)
insert into categories (title,description) values('lichi', 'fruits') returning *;

==//UPSERT ( insert a new record on top of the existing record or
update an existing record.)===

//create table
DROP TABLE IF EXISTS customers;

CREATE TABLE customers (
	customer_id serial PRIMARY KEY,
	name VARCHAR UNIQUE,
	email VARCHAR NOT NULL,
	active bool NOT NULL DEFAULT TRUE
);

//insert data
INSERT INTO 
    customers (name, email)
VALUES 
    ('IBM', 'contact@ibm.com'),
    ('Microsoft', 'contact@microsoft.com'),
    ('Intel', 'contact@intel.com');

//update data
INSERT INTO customers (name, email)
VALUES('Microsoft','hotline@microsoft.com') 
ON CONFLICT (name) 
DO 
   UPDATE SET email = EXCLUDED.email || ';' || customers.email;

//View Records
SELECT * From students;
 select * from categories

=============SELECT Clause ================

//Select from Specific Column
select id,fname as firstName,lname from students;

//Select from all Column
select * from students;

===============DISTINCT (remove duplicate)=========
select distinct fname from students;

==================LIMIT =========
select * from students LIMIT 2;

===============FETCH (The FETCH clause is functionally equivalent to the LIMIT clause.)============
select * from top_rated_films order by title fetch first 2 rows only;

===============Offset (is used to skip a specific number of rows)======
select * from students offset 1 limit 2 ;

=============WHERE Clause  (Use For Condition)================

select * from students where age>=30;

//Morethan on Condition 
select * from students where lname='Islam' AND age>=20;

=============UPDATE Clause  (Use For Modification)================
update students set lname='Biswas' where lname='Islam';

=============DELETE Clause  (Use For Delete Record)================

DELETE FROM students WHERE fname='John';
DELETE FROM students
delete from temp_categories ;--delete  all records
delete from top_rated_films where release_year=1994 returning release_year;

=============TRUNCATE Clause  (Use For Delete Record faster than delete, cant use where)================
truncate table students ;
=============ORDER BY Clause  (Use For Sorting Record)================ 

select * from students order by age asc; //Small to Large (default)
select * from students order by age desc;//Large to Small

=============GROUP BY Clause  (Use to group rows that have the same values -  identify unique rows)================ 

select name,sum(salary) from teachers group by name;



=============HAVING Clause  (Use to filter grouped rows - use with group by clause)================ 

select name from teachers group by name having count(name)>1;


===================Operators==============================

//AND (execute when both Conditions true)
select * from students where lname='Islam' AND age>=20;

//OR (execute when any one or both Condition is true)
select * from students where lname='Islam' OR age>=20;
select * from students where (lname='Islam' OR lname='Biswas') AND age>=20;

//IN --alternative of OR
select * from students where lname in('Islam','Biswas') AND age>=20;
select * from students where age in (19,21,22);

//NOT IN
select * from students where age not in (19,21,22)
select * from students where not (age=19 or age=21 or age=22) --alternate

//IS NOT
select * from students where lname is not null;

//LIKE (Searching) -- case-sensitive
select * from students where fname like 'T%';--only T..

//ILIKE (Searching) -- case-insensitive
select * from students where fname ilike 'T%';--T..,t..

//BETWEEN
select * from students where age between 22 and 30;




========================views (does not store data, execute on run time ,virtual table)===============
plsql check view
\dv

//create view
create view studentview as select fname,age from students;
create or replace view studentview as select fname,age from students;

//Show View
SELECT * FROM studentview;

//Delete View
drop view studentview;

==================material view (store data also use in large data, fast in remote data)======
//plsql
\dm

//create view
create materialized view studentmatview as select fname,age from students;

//Delete View
drop materialized view studentmatview;

//fetch data
select * from studentmatview;
REFRESH MATERIALIZED VIEW studentmatview;
=================Join============================
//Natural Join (no duplicate columns)
select * from top_rated_films natural join most_popular_films;

//inner join (Join Common --show duplicate colums also)
select students.fname,students.lname,teachers.name from students inner join teachers on students.id=teachers.id;
select * from top_rated_films as t inner join most_popular_films as m on t.release_year=m.release_year; 

//left join (join left table all rows (here students) with right table matching rows)
select students.fname,students.age,teachers.name from students left join teachers on students.id=teachers.id;

//Right join (join Right table all rows (here teachers) with left table matching rows)
select students.fname,students.age,teachers.name from students right join teachers on students.id=teachers.id;

//Full Outer join (join Right table all rows with left table all rows)
select students.fname,students.age,teachers.name from students full outer join teachers on students.id=teachers.id;
//Cross Join (like cross product in set)
select students.fname,students.age,teachers.name from students cross join teachers;

=====================Aggregate Functions====================
//max
select max(age) from students;
//min
select min(age) from students;
//avg
select avg(age) as avg_age from students;

//avg with round (.xx)
select round(avg(age),2) as avg_age from students;

//sum
select sum(salary) as total_salary from teachers;

//count
select count(*) as total_rows from teachers;

==============UNION=================
//create table
CREATE TABLE top_rated_films(
title VARCHAR NOT NULL,
release_year SMALLINT
);

CREATE TABLE most_popular_films(
title VARCHAR NOT NULL,
release_year SMALLINT
);

INSERT INTO 
   top_rated_films(title,release_year)
VALUES
   ('The Shawshank Redemption',1994),
   ('The Godfather',1972),
   ('12 Angry Men',1957);

INSERT INTO 
   most_popular_films(title,release_year)
VALUES
   ('An American Pickle',2020),
   ('The Godfather',1972),
   ('Greyhound',2020);

//UNION operator to combine data from both tables - removes duplicate

SELECT * FROM top_rated_films
UNION
SELECT * FROM most_popular_films;

//UNION operator to combine data from both tables - does not removes duplicate

SELECT * FROM top_rated_films
UNION ALL
SELECT * FROM most_popular_films;

===//EXCEPT operator returns distinct rows from the first (left) query that is not in the output of
the second (right) query.

example-all records that are present in the categories table but that are
not present in the tags table//====

select title from categories except select tag from tags


====//The INTERSECT operator performs the reverse operation. It searches for all the records
present in the first table that are also present in the second table//=============

select title from categories intersect select tag from tags;



============================User Defined Function=====================
//Create Function

create or replace function total_students()
returns integer as $total$
declare total integer;
begin
select count(*) into total from students;
return total;
end;
$total$ language plpgsql;

//Calling Function
select total_students();

//Create Function with argument
create function sum(var1 integer,var2 integer)
returns integer as $sum$
begin
return var1+var2;
end;
$sum$ language plpgsql;

//calling function
select sum(2,4)

====================== Triggers On Insert Event (Run Automatically when call)===================
//create employees table
create table employees(id int primary key not null,name text not null,salary int not null);

//create audit table
create table audit(id int primary key not null,name text not null,entry_date text);

//Create function
create or replace function audit_log() returns trigger as $xyz$
begin
insert into audit(id,name,entry_date)values(new.id,new.name,current_timestamp);
return new;
end;
$xyz$ language plpgsql;

//Create Trigger
create trigger audit_trigger after insert on employees
for each row execute procedure audit_log();

//currently audit table is empty
select*from audit;

//Insert Records
insert into employees values(1,'Tasikul',10000);

//check audilt log
select*from audit;

====================Alias(as)-Temporary Name===================
select s.fname,t.name from students as s,teachers as t where s.id=t.id;

=======================index========================
//create table
create table test(first_name text not null,last_name text not null,company_name text not null,address text not null,city text not null)

//Export CSV Free Sample Data for Database Load Testing (https://www.briandunning.com/sample-data/)

//Show Data
SELECT * FROM test

//Fetch Data (checking Time cost 12.26) (Without Index)
explain select * from test where first_name='Ahmed';

//Create Index 
create index emp_index on test("first_name");

//Fetch Data (checking Time cost 8.29) (With Index)
explain select * from test where first_name='Ahmed';

//Drop Index
drop index emp_index;



==========================Enum (User Defined Data type)============
//Create Type
create type mood as enum('sad','ok','happy');

//create table
create table person(name text,current_mood mood);

//insert records
insert into person values('Rahul','sad');
insert into person values('Neha','ok');
insert into person values('Robin','happy');

//fetch records
select * from person;

//fetch records on index
select min(current_mood) from person;


==============================String Function==========================
|| (Combine)
select 'Hello'||'World'
o/p> HelloWorld

concat()
select concat('Hello','Tasikul','Morning');
o/p>HelloTasikulMorning

length()
select length('Hello')
o/p>5

char_length()
select char_length('Hello')
o/p>5

lower()
select lower('Hello')
o/p>hello

upper()
select upper('Hello')
o/p>HELLO

substr()
select substr('Hello',2,3)
o/p>ell

position()
select position('e' in 'Hello')
o/p>2

ascii()
select ascii('A')
o/p>65

reverse()
select reverse('Hello')
o/p>olleH

repeat()
select repeat('Hi',3)
o/p>HiHiHi

coalesce() --return first not null value
select coalesce(NULL,'test');
o/p>test

select coalesce('orange','test');
o/p>orange

==================================Sub Query (Query within another query)===============================
//normal query
select * from teachers;

//with subquery (subquery execute first then main query)
select * from teachers where salary>(select avg(salary) from teachers);
select * from teachers where salary in(select salary from teachers where salary>20000);

=====================//CTE -Common table Expression==============
Example:-
//with --use to write large query
with del_posts as (
delete from t_posts
where category in (select pk from categories where title
='apple')
returning *)
insert into delete_posts select * from del_posts;

======================Window Functions (perform the calculation across a set of rows related to the current row.)=====================