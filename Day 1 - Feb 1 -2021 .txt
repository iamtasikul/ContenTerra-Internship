PostgreSQL

Windows Application :-SQL Shell (psql) / pgAdmin

//Help
\h select


//Create Database
CREATE DATABASE school;

//Show Database
\l

============Confirming the database size================
//First, we return to expanded mode
\x

//Then, execute the following command
\l+ school --(Size in KB)

//check db size using sql command
select pg_database_size('school');

//Drop Database
DROP DATABASE school;

//Conntect Database
\c school;

//Create Table
CREATE TABLE students(id integer not null primary key,fname text not null,lname text not null,age int not null);

//plsql view table
\dt

//Create table with Primary key
CREATE TABLE users (
pk int GENERATED ALWAYS AS IDENTITY,
username text NOT NULL, 
gecos text, 
email text NOT NULL, 
PRIMARY KEY( pk ),
UNIQUE ( username )
);

CREATE TABLE categories (pk int GENERATED ALWAYS AS IDENTITY,title text,description text);

//if not exist Create table with Primary key
CREATE TABLE if not exists users (
pk int GENERATED ALWAYS AS IDENTITY,
username text NOT NULL, 
gecos text, 
email text NOT NULL, 
PRIMARY KEY( pk ),
UNIQUE ( username )
);

//list of all the tables
\d

//Drop Table
DROP TABLE students;
DROP TABLE if exists students;

==========Managing temporary tables (which will only be visible
within the session where the table was created.)===

CREATE temp TABLE if not exists users (
pk int GENERATED ALWAYS AS IDENTITY,
username text NOT NULL, 
gecos text, 
email text NOT NULL, 
PRIMARY KEY( pk ),
UNIQUE ( username )
);

//Create Schema
\c school;
CREATE SCHEMA newschema;

//Delete Schema
DROP SCHEMA newschema;



insert into users (username,gecos,email) values('myusername','mygecos','myemail');

//View Records
SELECT * From students;
select pk,username,gecos,email from users;

//View Records
SELECT * From students;
select pk,username,gecos,email from users order by username;



//View Records
SELECT * From students;
 select * from categories









===============Offset (is used to skip a specific number of rows)======
select * from students offset 1 limit 2 ;














===================Operators==============================

//AND (execute when both Conditions true)
select * from students where lname='Islam' AND age>=20;

//OR (execute when any one or both Condition is true)
select * from students where lname='Islam' OR age>=20;
select * from students where (lname='Islam' OR lname='Biswas') AND age>=20;











========================views (does not store data, execute on run time ,virtual table)===============
plsql check view
\dv

//create view
create view studentview as select fname,age from students;
create or replace view studentview as select fname,age from students;

//Show View
SELECT * FROM studentview;

//Delete View
drop view studentview;

==================material view (store data also use in large data, fast in remote data)======
//plsql
\dm

//create view
create materialized view studentmatview as select fname,age from students;

//Delete View
drop materialized view studentmatview;

//fetch data
select * from studentmatview;
REFRESH MATERIALIZED VIEW studentmatview;



=====================Aggregate Functions====================
//max
select max(age) from students;
//min
select min(age) from students;
//avg
select avg(age) as avg_age from students;

//avg with round (.xx)
select round(avg(age),2) as avg_age from students;

//sum
select sum(salary) as total_salary from teachers;

//count
select count(*) as total_rows from teachers;














============================User Defined Function=====================
//Create Function

create or replace function total_students()
returns integer as $total$
declare total integer;
begin
select count(*) into total from students;
return total;
end;
$total$ language plpgsql;

//Calling Function
select total_students();

//Create Function with argument
create function sum(var1 integer,var2 integer)
returns integer as $sum$
begin
return var1+var2;
end;
$sum$ language plpgsql;

//calling function
select sum(2,4)

====================== Triggers On Insert Event (Run Automatically when call)===================
//create employees table
create table employees(id int primary key not null,name text not null,salary int not null);

//create audit table
create table audit(id int primary key not null,name text not null,entry_date text);

//Create function
create or replace function audit_log() returns trigger as $xyz$
begin
insert into audit(id,name,entry_date)values(new.id,new.name,current_timestamp);
return new;
end;
$xyz$ language plpgsql;

//Create Trigger
create trigger audit_trigger after insert on employees
for each row execute procedure audit_log();

//currently audit table is empty
select*from audit;

//Insert Records
insert into employees values(1,'Tasikul',10000);

//check audilt log
select*from audit;


=======================index========================
//create table
create table test(first_name text not null,last_name text not null,company_name text not null,address text not null,city text not null)

//Export CSV Free Sample Data for Database Load Testing (https://www.briandunning.com/sample-data/)

//Show Data
SELECT * FROM test

//Fetch Data (checking Time cost 12.26) (Without Index)
explain select * from test where first_name='Ahmed';

//Create Index 
create index emp_index on test("first_name");

//Fetch Data (checking Time cost 8.29) (With Index)
explain select * from test where first_name='Ahmed';

//Drop Index
drop index emp_index;



==========================Enum (User Defined Data type)============
//Create Type
create type mood as enum('sad','ok','happy');

//create table
create table person(name text,current_mood mood);

//insert records
insert into person values('Rahul','sad');
insert into person values('Neha','ok');
insert into person values('Robin','happy');

//fetch records
select * from person;

//fetch records on index
select min(current_mood) from person;


==============================String Function==========================
|| (Combine)
select 'Hello'||'World'
o/p> HelloWorld

concat()
select concat('Hello','Tasikul','Morning');
o/p>HelloTasikulMorning

length()
select length('Hello')
o/p>5

char_length()
select char_length('Hello')
o/p>5

lower()
select lower('Hello')
o/p>hello

upper()
select upper('Hello')
o/p>HELLO

substr()
select substr('Hello',2,3)
o/p>ell

position()
select position('e' in 'Hello')
o/p>2

ascii()
select ascii('A')
o/p>65

reverse()
select reverse('Hello')
o/p>olleH

repeat()
select repeat('Hi',3)
o/p>HiHiHi

coalesce() --return first not null value
select coalesce(NULL,'test');
o/p>test

select coalesce('orange','test');
o/p>orange



=====================//CTE -Common table Expression==============
Example:-
//with --use to write large query
with del_posts as (
delete from t_posts
where category in (select pk from categories where title
='apple')
returning *)
insert into delete_posts select * from del_posts;

======================Window Functions (perform the calculation across a set of rows related to the current row.)=====================